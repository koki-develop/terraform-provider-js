package datasources

import (
	"context"
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/koki-develop/terraform-provider-js/internal/util"
)

var (
	_ datasource.DataSource = &dataProgram{}
)

func NewDataProgram(version string) func() datasource.DataSource {
	return func() datasource.DataSource {
		return &dataProgram{ProviderVersion: version}
	}
}

type dataProgram struct {
	ProviderVersion string
}

func (d *dataProgram) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_program"
}

func (d *dataProgram) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"contents": schema.ListAttribute{
				Description: "Statements that are executed in the program.",
				ElementType: types.StringType,
				Required:    true,
			},

			"content": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

type dataProgramModel struct {
	Contents types.List   `tfsdk:"contents"`
	Content  types.String `tfsdk:"content"`
}

func (d *dataProgram) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	util.HandleRequest(
		ctx,
		&dataProgramModel{},
		&req.Config,
		&resp.State,
		&resp.Diagnostics,
		func(m *dataProgramModel) bool {
			s := new(strings.Builder)
			s.WriteString(fmt.Sprintf("// Code generated by JS.tf v%[1]s (https://registry.terraform.io/providers/koki-develop/js/%[1]s)\n", d.ProviderVersion))
			s.WriteString(util.StringifyStatements(m.Contents.Elements()))
			m.Content = types.StringValue(s.String())
			return true
		},
	)
}
